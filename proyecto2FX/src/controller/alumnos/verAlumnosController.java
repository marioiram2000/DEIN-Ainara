package controller.alumnos;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import modelo.Alumno;

import java.net.URL;
import java.util.ArrayList;
import java.util.ResourceBundle;

import dao.AlumnoDao;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.event.ActionEvent;

import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class verAlumnosController implements Initializable{
	@FXML
	private TextField filter;
	@FXML
	private TextField filter1;
	@FXML
	private TextField filter2;
	@FXML
	private TableView<Alumno> tabla;
	@FXML
	private TableColumn<Alumno, String> colDNI;
	@FXML
	private TableColumn<Alumno, String> colNombre;
	@FXML
	private TableColumn<Alumno, String> colApellidos;
	@FXML
	private Button btnAgregar;
	@FXML
	private Button btnModificar;

	// Event Listener on Button[#btnAgregar].onAction
	@FXML
	public void agregar(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnModificar].onAction
	@FXML
	public void modificar(ActionEvent event) {
		// TODO Autogenerated
	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		ObservableList<Alumno>data = FXCollections.observableArrayList();
		ArrayList<Alumno> alumnos = new AlumnoDao().selectAlumnos();
		for (Alumno alumno : alumnos) {
			data.add(alumno);
		}
		tabla.setItems(data);
		colDNI.setCellValueFactory(new PropertyValueFactory<Alumno, String>("dni"));
		colNombre.setCellValueFactory(new PropertyValueFactory<Alumno, String>("nombre"));
		colApellidos.setCellValueFactory(new PropertyValueFactory<Alumno, String>("apellidos"));

		// 1. Wrap the ObservableList in a FilteredList (initially display all data).
		FilteredList<Alumno> filteredData = new FilteredList<>(data, p -> true);

		// 2. Set the filter Predicate whenever the filter changes.
		filter.textProperty().addListener((observable, oldValue, newValue) -> {
			filteredData.setPredicate(alumno -> {
				if (newValue == null || newValue.isEmpty()) {
					return true;
				}
				String lowerCaseFilter = newValue.toLowerCase();

				if (alumno.getDni().toLowerCase().contains(lowerCaseFilter)) {
					return true;
				}
				return false;
			});
		});
		
		filter1.textProperty().addListener((observable, oldValue, newValue) -> {
			filteredData.setPredicate(alumno -> {
				if (newValue == null || newValue.isEmpty()) {
					return true;
				}
				String lowerCaseFilter = newValue.toLowerCase();

				if (alumno.getNombre().toLowerCase().contains(lowerCaseFilter)) {
					return true;
				}
				return false;
			});
		});
		
		filter2.textProperty().addListener((observable, oldValue, newValue) -> {
			filteredData.setPredicate(alumno -> {
				if (newValue == null || newValue.isEmpty()) {
					return true;
				}
				String lowerCaseFilter = newValue.toLowerCase();

				if (alumno.getApellido1().toLowerCase().contains(lowerCaseFilter)) {
					return true;
				}
				if (alumno.getApellido2().toLowerCase().contains(lowerCaseFilter)) {
					return true;
				}
				return false;
			});
		});

		// 3. Wrap the FilteredList in a SortedList.
		SortedList<Alumno> sortedData = new SortedList<>(filteredData);

		// 4. Bind the SortedList comparator to the TableView comparator.
		sortedData.comparatorProperty().bind(tabla.comparatorProperty());

		// 5. Add sorted (and filtered) data to the table.
		tabla.setItems(sortedData);
	}
}
